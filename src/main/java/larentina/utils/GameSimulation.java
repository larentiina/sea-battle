package larentina.utils;

import larentina.exceptions.ForbiddenCellException;
import larentina.io.GameIO;
import larentina.model.Field;
import larentina.model.User;
import lombok.RequiredArgsConstructor;
import java.util.Scanner;


@RequiredArgsConstructor
public class GameSimulation {

    private final GameIO gameIO;

    public void start()  {
        gameIO.printMessage("Добро пожаловать в игру морской бой!");

        BattleShipGameSession usg1 = initializePlayer( 1);
        BattleShipGameSession usg2 = initializePlayer( 2);
        battle(usg1, usg2);
    }

    private String initializePlayerName(int playerNumber){
       return gameIO.readLine("Игрок " + playerNumber + ", введите своё имя:");

    }

    private int choiceGenerateShipsMode(Scanner scanner){
        while (true) {
                int choice = gameIO.readInt("Введи 1 - если хочешь автосгенерировать постановку кораблей\n2 - если вручную");
                if (choice == 1 || choice == 2) {
                    return choice;
                } else {
                    gameIO.printMessage("Неверный выбор. Введите 1 или 2.");
                }

        }
    }
    private BattleShipGameSession initializePlayer(int playerNumber) {
            Scanner scanner = new Scanner(System.in);
            User user = new User(initializePlayerName(playerNumber), new Field());
            BattleShipGameSession userGame = new BattleShipGameSession(user,this.gameIO);
            gameIO.printMessage(user.getName() + " расставьте корабли на поле");
            gameIO.printField(user.getField(), userGame.isGameMode());
            int choice = choiceGenerateShipsMode(scanner);
            switch (choice) {
                case 1 -> userGame.autoGeneratedShips();
                case 2 -> { while (userGame.isGameMode()) {
                    userGame.positionShips();
                    gameIO.printField(user.getField(), userGame.isGameMode());
                }}
            }
            gameIO.printField(user.getField(), userGame.isGameMode());
            userGame.setGameMode(false);
            gameIO.clearScreen();

            return userGame;
    }


    public void battle(BattleShipGameSession user1, BattleShipGameSession user2) {
        Scanner scanner = new Scanner(System.in);
        while (user1.getKilledShips() < 20 && user2.getKilledShips() < 20) {
            takeTurn(user1, user2, scanner);
            if (user2.getKilledShips() == 20) break;
            takeTurn(user2, user1, scanner);
        }
        gameIO.printMessage("Победил" + (user1.getKilledShips() == 20 ? user2.getUser().getName() : user1.getUser().getName()));
    }

    private void takeTurn(BattleShipGameSession attacker, BattleShipGameSession defender, Scanner scanner) {
        boolean hit;
        do {
            gameIO.printField(defender.getUser().getField(), defender.isGameMode());
            gameIO.printMessage(attacker.getUser().getName() + ", Делай выстрел");
            int x = scanner.nextInt();
            int y = scanner.nextInt();
            Field field = defender.getUser().getField();
            try {
                hit = field.shoot(x, y);
                if (hit) {
                    defender.setKilledShips(defender.getKilledShips()+1);
                    gameIO.printMessage("Попал! Делаешь еще один выстрел.");
                } else {
                    gameIO.printMessage("Промах!");
                }
            }catch (ForbiddenCellException e){
                gameIO.printMessage(e.getMessage());
                hit = true;
            }
        } while (hit || defender.getKilledShips() < 20);
    }




}
