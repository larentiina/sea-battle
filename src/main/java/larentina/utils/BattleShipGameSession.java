package larentina.utils;

import larentina.io.GameIO;
import larentina.model.Field;
import larentina.model.User;
import larentina.exceptions.ForbiddenCellException;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.RequiredArgsConstructor;

import java.util.NoSuchElementException;
import java.util.Random;
import java.util.Scanner;

@Data
@RequiredArgsConstructor
public class BattleShipGameSession {
    private final User user;
    private final GameIO gameIO;
    private int X4_SHIPS = 1;
    private int X3_SHIPS = 2;
    private int X2_SHIPS = 3;
    private int X1_SHIPS = 4;
    private boolean gameMode = true;
    private int killedShips = 0;

    public void positionShips()  {
        Scanner scanner = new Scanner(System.in);
        if(hasAvailableShips()) {
            do {
                try {
                    gameIO.printMessage(String.format("Тебе осталось расставить %d 4x, %d 3x, %d 2x, %d 1x \n", X4_SHIPS, X3_SHIPS, X2_SHIPS, X1_SHIPS));
                    gameIO.printMessage("Введи координаты куда ты хочешь поставить корабль: \n x1 y1:");
                    int x1 = scanner.nextInt();
                    int y1 = scanner.nextInt();
                    gameIO.printMessage("x2 y2: ");
                    int x2 = scanner.nextInt();
                    int y2 = scanner.nextInt();
                    int distance = (int) Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
                    if (!isShipAvailable(distance)) {
                        gameIO.printMessage("Кораблю данного размера уже поставлен");
                    } else if (!user.getField().putShip(x1, y1, x2, y2)) {
                        gameIO.printMessage("По таким координатам корабль поставить нельзя");
                    } else {
                        matchSizeShip(distance);
                    }
                    break;
                }catch (NoSuchElementException | NumberFormatException ignored){}
            } while (true);

        }
    }
    private boolean hasAvailableShips(){
        return !(X4_SHIPS == 0 & X3_SHIPS == 0 & X2_SHIPS == 0 & X1_SHIPS == 0);
    }
    private boolean isShipAvailable(int distance) {
        return switch (distance) {
            case 0 -> X1_SHIPS > 0;
            case 1 -> X2_SHIPS > 0;
            case 2 -> X3_SHIPS > 0;
            case 3 -> X4_SHIPS > 0;
            default -> false;
        };
    }

    private void matchSizeShip(int size){
        switch (size){
            case 0-> X1_SHIPS--;
            case 1-> X2_SHIPS--;
            case 2-> X3_SHIPS--;
            case 3-> X4_SHIPS--;
            default-> throw new ForbiddenCellException("Неправильного размера корабль");
        }
    }


    public void autoGeneratedShips(){
        Field field = user.getField();
        while (hasAvailableShips()){
            Random random = new Random();
            int randomX = random.nextInt(10) + 1;
            int randomY = random.nextInt(10) + 1;
            int randomSize = random.nextInt(4);

           if(!isShipAvailable(randomSize)) continue;

            boolean shipPlaced = tryPlaceShip(field, randomX, randomY, randomSize);

            if (shipPlaced) {
                matchSizeShip(randomSize);
            }
        }

    }
    private boolean tryPlaceShip(Field field, int x, int y, int size) {

        int[][] directions = {
                {size, 0},
                {-size, 0},
                {0, size},
                {0, -size}
        };

        for (int[] dir : directions) {
            if (field.putShip(x, y, x + dir[0], y + dir[1])) {
                return true;
            }
        }

        return false;
    }

}
